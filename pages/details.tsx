import { GetServerSideProps, NextPage } from "next";
import { AxiosError } from "axios";
import { Error } from "@/constants/Errors";
import Head from "next/head";
import CurrenciesDetails from "@/components/CurrenciesDetails";
import {fetchAllCategories, fetchCurrenciesDetails} from "@/services/currencies";
import { DefaultQuery } from "@/constants/Query";
import {dehydrate, QueryClient} from "@tanstack/react-query";
import {QueryKeys} from "@/enums/query";
import {PageError} from "@/types/errors";
import SimpleError from "@/components/SimpleError";

const Details: NextPage<PageError> = ({error}) => {
if(error){
    return <SimpleError error={error}/>
}

    return (
        <>
            <Head>
                <title>Interview Task</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <CurrenciesDetails/>
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async ({
    query: { vs_currency, page, per_page, price_change_percentage, category },resolvedUrl
}) => {

    try {
        const queryClient = new QueryClient()

        await queryClient.prefetchQuery([QueryKeys.CURRENCIES_DETAILS,resolvedUrl],()=> fetchCurrenciesDetails({
            vs_currency: vs_currency || DefaultQuery.vs_currency,
            page: page || DefaultQuery.page,
            per_page: per_page || DefaultQuery.per_page,
            price_change_percentage: price_change_percentage || DefaultQuery.price_change_percentage,
            category: category as string
        }))

        await queryClient.prefetchQuery([QueryKeys.CURRENCIES_CATEGORIES], fetchAllCategories)

        return {
            props: {
                dehydratedState: dehydrate(queryClient),
            },
        };
    } catch (e: AxiosError | any) {
        return {
            props: {
                error: {
                    status: e.status || Error.status,
                    message: e.message || Error.message,
                },
            },
        };
    }
};

export default Details;
